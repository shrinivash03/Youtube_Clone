 import { asyncHandler } from "../utils/asyncHandler.js";
 import {ApiError} from "../utils/ApiErrors.js" 
 import {User} from "../models/user.model.js"
 import {uploadOnCloudinary} from "../utils/cloudinary.js"
 import { ApiResponse } from "../utils/ApiResponse.js";


 const registerUser= asyncHandler(async (req,res)=> {
    //get user detail from frontend
    //validation - not empty
    //check if user alredy register: username, email
    //check for image , check for avtar
    //upload them to cloudinary ,avtar
    //create user object -create entry in db
    //remove password and refresh token field from response
    //check for user creation
    //return response


    const {fullName,email,username,password}=req.body
     console.log("email:",email);
       
     console.log("req.body");
     
     
     if(
        [fullName,email,username,password].some((field)=>
            field?.trim()=== "" )  //Checks if any field is empty or missing
        ){
            throw new ApiError(400,"All fields are required")   
        }

      const existedUser= await User.findOne({
        $or:[{ username }, { email }]
      })   //Checks MongoDB if the user already exists.

 

      if(existedUser){
        throw new ApiError(409, "User with email or username")
      }

      const avatarLocalPath= req.files?.avatar[0]?.path;
      //const coverImageLocalPath= req.files?.coverImage[0]?.path;

    //   console.log(req.files);
     let coverImageLocalPath;
     if(req.files  && Array.isArray(req.files.
      coverImage) &&req.files.coverImage.length > 0){
        coverImageLocalPath = req.files.coverImage[0].path
      }

      // accesses the first file in the avatar array.
      // .path gets the path or URL of the uploaded file.
     // req.files is provided by upload middleware (e.g., multer)
     
     
     if(!avatarLocalPath){
        throw new ApiError(400,"Avatar file is requires")
      }

      const avatar=await uploadOnCloudinary(avatarLocalPath)
      const coverImage=await uploadOnCloudinary(coverImageLocalPath) 

      //uploading files on cloudinary 
     
   if(!avatar)
   {
    throw new ApiError(400,"Avatar file is required")
   }

   //we are not checking coverImage because in coverimage model the fiels required is false 

    const user= await User.create({
        fullName,
        avatar: avatar.url,
        coverImage: coverImage?.url || "",
        email,
        password,
        username:username.toLowerCase()
    })


    //User.create: This is a Mongoose method used to create a new document (user) in the MongoDB database
    //It inserts the provided data (fullName, avatar, email, etc.) into the User collection.



    const createdUser= await User.findById(user._id).select( 
        "-password -refreshToken"  //removing those things not required in db using -(negative sign)
    )

    /*
    ==> .select() method is used to include or exclude specific fields in the query result from the database.
    ==> Fetches the newly created user from the database using its unique ID (user._id), 
    which was auto-generated by MongoDB during the create() operation.
    ==>  Example: Fetching the name, email, and profilePicture for a user in a front-end request
    while avoiding sensitive fields like password or refreshToken.
    */
       
    if(!createdUser){
        throw new ApiError(500,"Something went wrong while registering thye user");
    }

   return res.status(201).json(
    new ApiResponse(200,createdUser,"User registerd Successfully")
   )

   //Send Response to the Client

 
    }  )

       

    
 

 export {registerUser

 } ;